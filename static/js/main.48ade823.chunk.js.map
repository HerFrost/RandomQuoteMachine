{"version":3,"sources":["komponente/Taster.js","App.js","serviceWorker.js","index.js"],"names":["Taster","tasterPrikaziIme","clickHandler","onClick","className","App","props","state","citati","nasumicniCitat","indexCitata","bind","fetch","then","data","json","setState","index","Math","floor","random","this","length","id","quote","author","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mQAMeA,G,MAHA,SAAC,GAAD,IAAEC,EAAF,EAAEA,iBAAkBC,EAApB,EAAoBA,aAApB,OACf,4BAAQC,QAASD,EAAcE,UAAU,yBAAyBH,KCmDnDI,E,kDAlDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,eAAgB,MAElB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,gEASI,IAAD,OAClBC,MAAM,yIACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAL,GAAM,OAAI,EAAKQ,SAAS,CAACR,gB,oCAIjC,IAAMS,EAAQC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKd,MAAMC,OAAOc,QACrDb,EAAiBY,KAAKd,MAAMC,OAAOS,GAEzCI,KAAKL,SAAS,CACZP,qB,+BAMJ,OACE,6BACE,wBAAIc,GAAG,UAAP,wBACA,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UACkB,OAA9BiB,KAAKd,MAAME,gBAA2BY,KAAKd,MAAME,eAAee,OAEnE,yBAAKpB,UAAU,eACgB,OAA9BiB,KAAKd,MAAME,gBAA2BY,KAAKd,MAAME,eAAegB,QAEjE,6BACA,kBAAC,EAAD,CAAQxB,iBAAiB,qBAAgBC,aAAcmB,KAAKX,eAE9D,6BAAK,oD,GA1CCgB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.48ade823.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Taster = ({tasterPrikaziIme, clickHandler}) => (\n<button onClick={clickHandler} className=\"ui black basic button\">{tasterPrikaziIme}</button>\n);\nexport default Taster;","import React from 'react';\nimport './App.css';\nimport Taster from './komponente/Taster';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      citati: [],\n      nasumicniCitat: null\n    }\n    this.indexCitata = this.indexCitata.bind(this);\n  }\n\n    componentDidMount() {\n      fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n        .then(data => data.json())\n        .then(citati => this.setState({citati})\n    )}\n\n    indexCitata() {\n      const index = Math.floor(Math.random() * this.state.citati.length);\n      const nasumicniCitat = this.state.citati[index];\n      \n      this.setState({\n        nasumicniCitat\n      });\n    }\n\n\n  render() {\n    return (\n      <div>\n        <h1 id=\"naslov\">Random Quote Machine</h1>\n        <div className=\"container\">\n          <div className=\"ui card\">\n            <div className=\"content\">\n              <div className=\"header\">\n                {this.state.nasumicniCitat !== null && this.state.nasumicniCitat.quote}\n              </div>\n              <div className=\"description\">\n              {this.state.nasumicniCitat !== null && this.state.nasumicniCitat.author}\n              </div>\n              <br></br>\n              <Taster tasterPrikaziIme=\"SledeÄ‡i citat\" clickHandler={this.indexCitata} />\n              </div>\n            <div><h6>by her_frost</h6></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}